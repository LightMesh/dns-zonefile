grammar Zonefile
  rule zone
    (variable / space / comment)* soa (resource_record / comment / space)* {
      def variables
        @variables ||= begin
          raw = elements[0].elements.select { |e| e.to_s =~ /^\$/ }
          variables = {}
          raw.each do |e|
            variables[e.name.text_value.to_s] = e.value.text_value.to_s
          end
          variables
        end
      end

      def origin
        soa.origin.host.to_s
      end

      def to_s
        text_value
      end

      def rr
        elements[-1].elements.select { |e| e.to_s !~ /\A\s*(;.*)?\z|\A\z/; }
      end
    }
  end

  rule variable
    "$" name:([a-zA-Z0-9]+) space value:([a-zA-Z0-9\.\-]+) space? comment? {
      def to_s
        "$#{name.text_value.to_s} #{value.text_value.to_s}"
      end
    }
  end

  rule soa
    origin space zone_type space "SOA" space ns space rp space "(" space* serial space refresh space retry space expiry space ttl space* ")" {
      def to_s
        text_value
      end
    }
  end

  rule resource_record
    space? record:(a_record / cname_record / mx_record / ns_record) space? comment? {
      def to_s
        text_value
      end

      def record_type
        record.elements[2].text_value
      end

      def method_missing(method_name, *args)
        if record.respond_to?(method_name)
          record.send(method_name, *args)
        end
      end

      def respond_to?(method_name)
        super || record.respond_to?(method_name)
      end
    }
  end

  rule a_record
    host space "A" space ip_address {
      def to_s
        text_value
      end
    }
  end

  rule ip_address
    [\d]+ "." [\d]+ "." [\d]+ "." [\d]+ {
      def to_s
        text_value
      end
    }
  end

  rule cname_record
    alias:host space "CNAME" space host {
      def to_s
        text_value
      end
    }
  end

  rule mx_record
    host space "MX" space priority:integer space exchanger:host {
      def to_s
        text_value
      end
    }
  end

  rule ns_record
    host space "NS" space nameserver:host {
      def to_s
        text_value
      end
    }
  end

  rule origin
    host comment* {
      def to_s
        text_value
      end
    }
  end

  rule space
    [\s]+ {
      def to_s
        text_value
      end
    }
  end

  rule zone_type
    "IN" {
      def to_s
        text_value
      end
    }
  end

  rule comment
    space* ";" [^\n]+ {
      def to_s
        text_value
      end
    }
  end

  rule ns
    host comment* {
      def to_s
        text_value
      end
    }
  end

  rule rp
    ([a-zA-Z0-9\-]+ ".")+ {
      def to_s
        text_value
      end
    }
  end

  rule serial
    integer comment* {
      def to_i
        integer.to_i
      end
    }
  end

  rule time_interval
    integer time_multiplier {
      def to_s
        text_value
      end

      def to_i
        multipliers = {
          ""  => 1,
          "h" => 60 * 60,
          "d" => 60 * 60 * 24,
          "w" => 60 * 60 * 24 * 7,
          "m" => 60 * 60 * 24 * 7 * 4,
          "y" => 60 * 60 * 24 * 7 * 4 * 52
        }
        multipliers[time_multiplier.to_s] * integer.to_i
      end
    }
  end

  rule refresh
    time_interval comment* {
      def to_i
        time_interval.to_i
      end
    }
  end

  rule integer
    [0-9]+ {
      def to_i
        text_value.to_i
      end
    }
  end

  rule time_multiplier
    ("h" / "d" / "w" / "m" / "y" / "") {
      def to_s
        text_value
      end
    }
  end

  rule retry
    time_interval comment* {
      def to_i
        time_interval.to_i
      end
    }
  end

  rule expiry
    time_interval comment* {
      def to_i
        time_interval.to_i
      end
    }
  end

  rule ttl
    time_interval comment* {
      def to_i
        time_interval.to_i
      end
    }
  end

  rule host
    (([a-zA-Z0-9\-\.])+ / "@"?) {
      def zone
        parent.parent.parent.parent
      end

      def to_s
        case
        when text_value =~ /\.$/
          text_value
        when text_value == "@" || text_value == ""
          zone.origin.to_s
        else
          text_value + '.' + zone.origin.to_s
        end
      end
    }
  end
end